
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSPropertyDeclaration
import java.io.OutputStream

data class SimpleClass(
        val simpleName: String,
        val packageName: String,
        val properties: List<SimpleProperty>,
) {
    val classQualifiedName
        get() = "$packageName.$simpleName"

    data class SimpleProperty(
            val name: String,
            val type: String,
    )
}

fun SimpleClass.toLensText(): String {
    val lensImport = """
            // Generated by KSP
            package $packageName
            
            import ru.lardis.lens_core.Lens
            import ru.lardis.lens_core.andThen
             
           
        """.trimIndent()

    val lensProperties = properties.joinToString(
            separator = "\n\n",
            transform = { (propertyName, propertyTypeName) ->
                propertyLensText(simpleName, classQualifiedName, propertyName, propertyTypeName)
            }
    )

    return lensImport + lensProperties
}

private fun propertyLensText(
        simpleName: String,
        classQualifiedName: String,
        propertyName: String,
        propertyTypeName: String,
): String = """
            val <A> Lens<A, ${classQualifiedName}>.$propertyName: Lens<A, $propertyTypeName>
                get() = this andThen ${classQualifiedName}.$propertyName
            
            inline val ${classQualifiedName}.Companion.$propertyName: Lens<${classQualifiedName}, $propertyTypeName>
                inline get() = Lens(
                        get = { ${simpleName}: ${classQualifiedName} -> ${simpleName}.$propertyName },
                        set = { ${simpleName}: ${classQualifiedName}, value: $propertyTypeName ->
                            ${simpleName}.copy($propertyName = value)
                        }
                )
        """.trimIndent()


infix fun OutputStream.appendText(str: String) {
    this.write(str.toByteArray())
}

val KSPropertyDeclaration.typeQualifiedName : String
    get() = type.resolve().declaration.qualifiedName!!.asString()

fun KSAnnotated.isKSClassDeclaration() = this is KSClassDeclaration

